#######################################################################
#	Thus it begins...
#######################################################################

AC_INIT(smtpf, 2.6, [Anthony Howe <achowe@snert.com>])

dnl The autoconf version I learned to deal with.
AC_PREREQ(2.59)

dnl Yes I wrote this mess.
SNERT_INIT([],[Copyright 2006, 2022 by SnertSoft. All rights reserved.], [src/BUILD_ID.TXT])

AC_SUBST(rel_incdir, '../../include')
AC_SUBST(rel_libdir, '../../lib')
AC_SUBST(rel_tardir, '../../../..')

#######################################################################
#	Auxliary files to be modified later
#######################################################################

AC_CONFIG_FILES(MANIFEST.TXT)
AC_CONFIG_FILES(package/FreeBSD/+CONTENTS)
AC_CONFIG_FILES(package/FreeBSD/+COMMENT)
AC_CONFIG_FILES(package/FreeBSD/+DESC)
AC_CONFIG_FILES(package/FreeBSD/+DISPLAY)
AC_CONFIG_FILES(package/FreeBSD/makefile)
AC_CONFIG_FILES(package/Linux.rpm/makefile)
AC_CONFIG_FILES(package/OpenBSD/+CONTENTS)
AC_CONFIG_FILES(package/OpenBSD/+COMMENT)
AC_CONFIG_FILES(package/OpenBSD/+DESC)
AC_CONFIG_FILES(package/OpenBSD/+DISPLAY)
AC_CONFIG_FILES(package/OpenBSD/makefile)
AC_CONFIG_FILES(package/Windows/installer.nsi)
AC_CONFIG_FILES(makefile)
AC_CONFIG_FILES(install.sh)
AC_CONFIG_FILES(src/makefile)
AC_CONFIG_FILES(doc/smtpf.0)
AC_CONFIG_FILES(doc/manual.shtml)
AC_CONFIG_FILES(doc/install.html)
AC_CONFIG_FILES(doc/access-map.html)
AC_CONFIG_FILES(doc/route-map.html)
AC_CONFIG_FILES(doc/reply.html)
AC_CONFIG_FILES(doc/smtpf-cf.html)
AC_CONFIG_FILES(doc/syslog.html)
AC_CONFIG_FILES(doc/glossary.html)
AC_CONFIG_FILES(doc/runtime.html)
AC_CONFIG_FILES(doc/summary.html)
AC_CONFIG_FILES(doc/license.html)
AC_CONFIG_FILES(doc/BarricadeMX.html)
AC_CONFIG_FILES(examples/netbsd.rcd)
AC_CONFIG_FILES(examples/startup.sh)
AC_CONFIG_FILES(examples/Makefile)
dnl AC_CONFIG_FILES(test/makefile)
AC_CONFIG_FILES(src/config.h.in)
AC_CONFIG_HEADERS(src/config.h)

#######################################################################
#	Configuration options: settings
#######################################################################

SNERT_OPTION_ENABLE_RUN_USER(smtpf)
SNERT_OPTION_ENABLE_RUN_GROUP(smtpf)

AC_ARG_ENABLE(attachment, [AC_HELP_STRING([--disable-attachment],[disable file attachment filter])])
AC_ARG_ENABLE(avastd, [AC_HELP_STRING([--enable-avastd],[enable Avast! AV support])])
AC_ARG_ENABLE(clamd, [AC_HELP_STRING([--disable-clamd],[disable Clam AV support])])
AC_ARG_ENABLE(cli, [AC_HELP_STRING([--enable-cli],[enable command line interface support])])
AC_ARG_ENABLE(click, [AC_HELP_STRING([--disable-click],[enable rejection click support])])
AC_ARG_ENABLE(concurrent, [AC_HELP_STRING([--disable-concurrent],[disable concurrent connection tests])])
AC_ARG_ENABLE(ctasd, [AC_HELP_STRING([--enable-ctasd],[enable CommTouch Advanced Security daemon support])])
AC_ARG_ENABLE(dnslists, [AC_HELP_STRING([--disable-dnslists],[disable DNS B/W list support])])
AC_ARG_ENABLE(digest, [AC_HELP_STRING([--disable-digest],[disable digest black lists])])
AC_ARG_ENABLE(dupmsg, [AC_HELP_STRING([--disable-dupmsg],[disable duplicate message tracking])])
AC_ARG_ENABLE(emew, [AC_HELP_STRING([--disable-emew],[disable EMEW support])])
AC_ARG_ENABLE(freemail, [AC_HELP_STRING([--disable-freemail],[disable free mail source testing])])
AC_ARG_ENABLE(fpscand, [AC_HELP_STRING([--enable-fpscand],[enable F-Prot AV support])])
AC_ARG_ENABLE(grey, [AC_HELP_STRING([--disable-grey],[disable grey-listing])])
AC_ARG_ENABLE(ixhash, [AC_HELP_STRING([--disable-ixhash],[disable iXhash DNS black list support])])
AC_ARG_ENABLE(lickey, [AC_HELP_STRING([--enable-lickey],[enable license key checks])])
dnl AC_ARG_ENABLE(lua, [AC_HELP_STRING([--enable-lua],[enable LUA scripting support (experimental)])])
AC_ARG_ENABLE(misc, [AC_HELP_STRING([--disable-misc],[disable miscellanous tests])])
AC_ARG_ENABLE(msglimit, [AC_HELP_STRING([--disable-msglimit],[disable message limit restrictions])])
AC_ARG_ENABLE(null, [AC_HELP_STRING([--disable-null],[disable null sender throttling])])
AC_ARG_ENABLE(p0f, [AC_HELP_STRING([--enable-p0f],[enable p0f support])])
AC_ARG_ENABLE(pad, [AC_HELP_STRING([--disable-pad],[disable RFC 2821 reply line padding])])
AC_ARG_ENABLE(quit, [AC_HELP_STRING([--disable-quit],[disable quit, restart, restart-if options])])
AC_ARG_ENABLE(sav, [AC_HELP_STRING([--enable-sav],[enable sender address verification])])
AC_ARG_ENABLE(save, [AC_HELP_STRING([--disable-save],[disable save message support])])
AC_ARG_ENABLE(savdid, [AC_HELP_STRING([--enable-savdid],[enable Sophos AV support])])
AC_ARG_ENABLE(siq, [AC_HELP_STRING([--enable-siq],[enable Server Index Query support])])
AC_ARG_ENABLE(size, [AC_HELP_STRING([--disable-size],[disable message size restrictions])])
AC_ARG_ENABLE(spamd, [AC_HELP_STRING([--enable-spamd],[enable older reject-only SpamAssassin support])])
AC_ARG_ENABLE(spamd2, [AC_HELP_STRING([--disable-spamd2],[disable newer SpamAssassin with tagging support])])
AC_ARG_ENABLE(spf, [AC_HELP_STRING([--disable-spf],[disable SPF Classic support])])
AC_ARG_ENABLE(timelimit, [AC_HELP_STRING([--disable-timelimit],[disable time limited recipient address feature])])
AC_ARG_ENABLE(uribl, [AC_HELP_STRING([--disable-uribl],[disable URI black list support])])

AS_IF([test ${enable_attachment:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_ATTACHMENT)])
AS_IF([test ${enable_avastd:='no'} = 'yes'],[enable_save='yes'; AC_DEFINE_UNQUOTED(FILTER_AVASTD)])
AS_IF([test ${enable_clamd:='yes'} = 'yes'],[enable_save='yes'; AC_DEFINE_UNQUOTED(FILTER_CLAMD)])
AS_IF([test ${enable_cli:='no'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_CLI)])
AS_IF([test ${enable_click:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_CLICK)])
AS_IF([test ${enable_concurrent:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_CONCURRENT)])
AS_IF([test ${enable_ctasd:='no'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_CTASD)])
AS_IF([test ${enable_digest:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_DIGEST)])
AS_IF([test ${enable_dnslists:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_RBL)])
AS_IF([test ${enable_dupmsg:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_DUPMSG)])
AS_IF([test ${enable_emew:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_EMEW)])
AS_IF([test ${enable_freemail:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_FREEMAIL)])
AS_IF([test ${enable_fpscand:='no'} = 'yes'],[enable_save='yes'; AC_DEFINE_UNQUOTED(FILTER_FPSCAND)])
AS_IF([test ${enable_grey:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_GREY)])
AS_IF([test ${enable_ixhash:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_IXHASH)])
AS_IF([test ${enable_lickey:='no'} = 'yes'],[AC_DEFINE_UNQUOTED(ENABLE_LICKEY)])
dnl AS_IF([test ${enable_lua:='no'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_LUA)])
AS_IF([test ${enable_misc:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_MISC)])
AS_IF([test ${enable_msglimit:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_MSG_LIMIT)])
AS_IF([test ${enable_null:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_NULL)])
AS_IF([test ${enable_p0f:='no'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_P0F)])
AS_IF([test ${enable_pad:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_PAD)])
AS_IF([test ${enable_quit:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(ENABLE_OPTION_QUIT)])
AS_IF([test ${enable_sav:='no'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_SAV)])
AS_IF([test ${enable_savdid:='no'} = 'yes'],[enable_save='yes'; AC_DEFINE_UNQUOTED(FILTER_SAVDID)])
AS_IF([test ${enable_siq:='no'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_SIQ)])
AS_IF([test ${enable_size:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_SIZE)])
AS_IF([test ${enable_spamd:='no'} = 'yes'],[enable_spamd2='no'; AC_DEFINE_UNQUOTED(FILTER_SPAMD)])
AS_IF([test ${enable_spamd2:='yes'} = 'yes'],[enable_save='yes'; AC_DEFINE_UNQUOTED(FILTER_SPAMD2)])
AS_IF([test ${enable_spf:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_SPF)])
AS_IF([test ${enable_timelimit:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_TIMELIMIT)])
AS_IF([test ${enable_uribl:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_URIBL)])

AS_IF([test ${enable_save:='yes'} = 'yes'],[AC_DEFINE_UNQUOTED(FILTER_SAVE)])

#######################################################################
#	Configuration options: packages
#######################################################################

AC_ARG_WITH(p0f,
	[AC_HELP_STRING([[--with-p0f=dir ]],[  p0f source directory or location of p0f-query.h])],
	[
	],[
		with_p0f='/usr/local/src/p0f'
	]
)
AC_SUBST(with_p0f)
AS_IF([test -d ${with_p0f:-undef}],[
	CFLAGS="-I${with_p0f} ${CFLAGS}"
	AC_CHECK_HEADERS([p0f-query.h api.h])
	AC_CHECK_DECLS([QUERY_MAGIC, P0F_QUERY_MAGIC],[],[],[
AC_INCLUDES_DEFAULT
#if defined HAVE_API_H
# include <api.h>
#elif defined HAVE_P0F_QUERY_H
# include <p0f-query.h>
#endif
	])
])

AC_ARG_WITH(lua,
	[AC_HELP_STRING([--with-lua],[enable LUA scripting support (experimental)])],
	[
		AC_CHECK_HEADERS([lua.h],[],[],[/* */])
		if test "$ac_cv_header_lua_h" = 'no'; then
			saved_cflags=$CFLAGS
			CFLAGS="-I/usr/local/include ${saved_cflags}"
			unset ac_cv_header_lua_h
			echo "retrying with -I/usr/local/include ..."
			AC_CHECK_HEADERS([lua.h],[],[],[/* */])
			if test "$ac_cv_header_lua_h" = 'no'; then
				CFLAGS=$saved_cflags
			else
				LDFLAGS="-L/usr/local/lib ${LDFLAGS}"
			fi
		fi
		if test "$ac_cv_header_lua_h" = 'yes'; then
			AC_DEFINE_UNQUOTED(FILTER_LUA)
			LIBS="-llua -lm $LIBS"
			LDFLAGS="-Wl,-E ${LDFLAGS}"
		fi
	]
)

#######################################################################
#	Load LibSnert Configuration
#######################################################################

if test -f '../lib/version.sh' ; then
	snert_libsnert=yes
	. '../lib/version.sh'

	SNERT_TAR_SETTINGS

	case "$platform" in
	Linux)
		AC_SUBST(CACHE_DIR, '/var/cache/smtpf')
		AC_SUBST(STATS_DIR, '/var/cache/smtpf')
		;;

	*BSD|SunOS|Solaris)
		AC_SUBST(CACHE_DIR, '/var/db/smtpf')
		AC_SUBST(STATS_DIR, '/var/db/smtpf')
		;;
	*)
		AC_SUBST(CACHE_DIR, '.')
		AC_SUBST(STATS_DIR, '.')
		;;
	esac

	AC_SUBST(CC)
	AC_SUBST(CC_O)
	AC_SUBST(CC_E)
	AC_SUBST(CFLAGS)
	AC_SUBST(LDFLAGS)
	AC_SUBST(ARCHIVE)
	AC_SUBST(COMPILE)
	AC_SUBST(RANLIB)
	AC_SUBST(LIBEXT)
	AC_SUBST(OBJEXT)
	AC_SUBST(EXEEXT)
	AC_SUBST(AUTOCONF)
	AC_SUBST(MD5SUM)
	AC_SUBST(TAR_I)

	AC_SUBST(ENABLE_MINGW)

	AC_SUBST(LIBS_RT)

	AC_SUBST(CFLAGS_DB)
	AC_SUBST(LDFLAGS_DB)
	AC_SUBST(HAVE_LIB_DB)

	AC_SUBST(LIBS_LUA)
	AC_SUBST(CFLAGS_LUA)
	AC_SUBST(LDFLAGS_LUA)

	AC_SUBST(LIBS_SQLITE3)
	AC_SUBST(CFLAGS_SQLITE3)
	AC_SUBST(LDFLAGS_SQLITE3)

	AC_SUBST(CFLAGS_PTHREAD)
	AC_SUBST(LDFLAGS_PTHREAD)
	AC_SUBST(HAVE_LIB_PTHREAD)

	AC_SUBST(HAVE_LIB_SEM)
	AC_SUBST(HAVE_LIB_WS2_32)
	AC_SUBST(HAVE_LIB_IPHLPAPI)
	AC_SUBST(NETWORK_LIBS)

	AC_SUBST(LIBS_SSL)
	AC_SUBST(CFLAGS_SSL)
	AC_SUBST(LDFLAGS_SSL)

	if test "X${HAVE_LIB_SQLITE3}" = 'X' ; then
		echo
		echo '***************************************************************'
		echo "***   This application requires threaded SQLite3 support.   ***"
		echo '***************************************************************'
		echo
#		exit 1
	fi
	expr "${CFLAGS_PTHREAD}" : '.*-pthread' >/dev/null ;
	has_freebsd_pthread=$?
	if test "X${HAVE_LIB_PTHREAD}" = 'X' -a $has_freebsd_pthread -ne 0 -a "X${ENABLE_MINGW}" = 'X'; then
		echo
		echo '***************************************************************'
		echo "***     This application requires POSIX thread support.     ***"
		echo '***************************************************************'
		echo
		exit 1
	fi

	LIBS="${LIBS} ${HAVE_LIB_DB} ${LIBS_RT} ${LIB_SQLITE3} ${HAVE_LIB_PTHREAD} ${LIBS_SSL} ${HAVE_LIB_WS2_32} ${HAVE_LIB_IPHLPAPI}"
else
	snert_libsnert=no
	echo
	echo '***************************************************************'
	echo 'Oi! You must download, configure, and build LibSnert first!'
	echo '***************************************************************'
	echo
fi

#######################################################################
#	Generate output.
#######################################################################

SNERT_FINI

echo
echo "Generating files..."
echo
AC_OUTPUT()

echo
echo $PACKAGE_NAME/$package_major.$package_minor.$package_build
echo $package_copyright
echo
AC_MSG_RESULT([  Platform..........: $platform])
AC_MSG_RESULT([  prefix............: $prefix])
AC_MSG_RESULT([  exec_prefix.......: $exec_prefix])
AC_MSG_RESULT([  sbindir...........: $sbindir])
AC_MSG_RESULT([  run-user..........: $enable_run_user])
AC_MSG_RESULT([  run-group.........: $enable_run_group])
AC_MSG_RESULT([  CFLAGS............: $CFLAGS])
AC_MSG_RESULT([  LDFLAGS...........: $LDFLAGS])
AC_MSG_RESULT([  LIBS..............: $LIBS])
echo
